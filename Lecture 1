With running a script, if you want to run the whole script, do not highlight the whole script (at least when working with HMTL
Remember to open the rigth proejct before tryign to run the script
So called shell scripts are most often small programs that can be run fromthe terminal. Editing shell scripts or other text files requires a text editor tobe used. (atom etc)

./ means search for the program in the current directory.

Exportation in BASH 
export command exports an item to teh bash environment but if you close the bash, it will be erased - if you wanna keep the item, you need to create a file witc touch command to keep it
export I=eggs,$I means that you export an item eggs into the bash environment
if you export lets say export I=ägg this replaces the pre-existing item from the directory

#this is a change, feel free to not add it :)

P2
See how many lines the file contains: 1000
number of words: 2000000



Tweaking file format 
e.g. catmyFile.fna | tracgtACGTtgcaTGCA > myNewFile.fna
    - tr - translates acgt to tgca
    - pipe | needs to be used 
    - with rem you reverse it
 catmyFile.csv | sed 's/,/ / ' > myNewFile.txt 
    Prints e.g.: Hi I,am,from,here!
    - sed subsitutues commas to spaces 's/,/ / '
    but if you want to apply this change to a whole sentence: 's/,/ /g'
    Prints : Hey I am from here!
     catmyFile.csv | sed 's/Hi/Hello/g' > myNewFile.txt 
     Hello,I,am,from,here!

**Loops**
user FielsForExercises> For i in 1 2 3 4 5; do echo "welcome $i times"; done      # do exactly like this, space by space

do statement starts the loop, done ends it
While
while [ condiIon ]; do command1 command2 .. .... commandN; done

e.g
catmyfile.fna | while read line; do echo -n $line | wc -c; done
 - good for calculating the number of bases in the genome for isntance
 
 If you wanna loop over files - use for loops
 if loop via file contents - use while 
 
 #!/bin/sh               
 echo "hello world"
 
sh hello.sh 
print: hello world
use man to check commands like
man chmod

scp -r user@ip or server name:~/location .
 - brings the whole file from the distant server to yours
 scp -r user@ip or server name:~/location/* .
 brings the contents of the file from the distant server to yours


When wanting to select certain rows/columns from a file (which is organised in a way that it can be intepreted this way)

[inf-54-2020@bioinf-biol302454 BashExercise]$ cat paxillus.fna | grep -A 1 -f list.txt
>HISEQ1:132:D0T25ACXX:3:1103:19197:80091 1:N:0:TGACCA
CCGAGCTTTCTTTCACAAGATCAAGTCTCGTCTCTCCTTCAGCGGTCGAAGATCCTGTTGGAGGAATTCAGCCTAGAAGATCACCCGCTTACCAAGTTCAC
--
>HISEQ1:132:D0T25ACXX:3:1104:3139:53081 1:N:0:TGACCA
CAGCATCAGGGTCAGCGATCTTCTTGGTATCGACCCAGTCCTCAGGCTTCGTGTCTTCGGGGTCGTCAATCTCCGTGGGAGGGTTGACGGCGGGGGTGAAG
--
>HISEQ1:132:D0T25ACXX:3:1104:17112:70958 1:N:0:TGACCA
AAATCCTTTATCCACGCACTTAATCCCTGTCCATCAAATGGCTTTCCTCGGACTTCGCAAATGGCCCACGCCGGTCCTGAAGCCCATGGCTCCATTCATCG
[inf-54-2020@bioinf-biol302454 BashExercise]$ cat list.txt | cut -d : -f 5-7 | tr : "\t"
1104	17112	70958
1104	3139	53081
1103	19197	80091
[inf-54-2020@bioinf-biol302454 BashExercise]$ cat list.txt | head -2 | cut -d : -f 5-7 | tr : "\t"
1104	17112	70958
1104	3139	53081
[inf-54-2020@bioinf-biol302454 BashExercise]$ 
## "\t" is the tab



seds///substitutes a string, here the HISEQ1:

catpaxillus.fna |seds/HISEQ1/Paxillus/

Which sequence is the most common?
[inf-54-2020@bioinf-biol302454 BashExercise]$ rm newPaxillus.fna 
[inf-54-2020@bioinf-biol302454 BashExercise]$ cat paxillus.fna | grep -v \> | sort | uniq -c | sort -n | tail -1
    229 GTTTTCTTTGACATCCTGATCAACAACCAGCCCGCTGGCCGCATCGTCTTCAGGCTCTACGACCAGCAGGTGCCCATAACTACCAAAAACTTCCGTGAACT


__variables in BASH__

When valuesshould be returned from a variable a $-sign is used. 
e.g 
[inf-54-2020@bioinf-biol302454 ~]$ age=10
[inf-54-2020@bioinf-biol302454 ~]$ dogyear=7
[inf-54-2020@bioinf-biol302454 ~]$ echo "$age*$dogyear" | bc
70

Or you can just put:
[inf-54-2020@bioinf-biol302454 ~]$ echo $((age*dogyear))
70


First we create a file with 3 lines of Nts
[inf-54-2020@bioinf-biol302454 ~]$ echo -e "acg\ngc\nattta" > file.fna

Then we see the number of Nts each line
[inf-54-2020@bioinf-biol302454 ~]$ cat file.fna | while read line; do echo -n $line | wc -c; done
3
2
5

keep in mind we need to add -n to prevent BASH from counting \ (represents new line) as part of the characters
otherwise:
4
3
6
scp-ruser@130.235.8.214:⇠/BashExercise/Test .


***1. calculate the GC content of paxinus file***
    Things we need
    grep - takes a pattern, in this case>,andlooksforthatpatternineachlineand outputs only these line
    esim. catpaxillus.fna |grep\>
    to calculate the word count |wc-l
    we need | bc
    divide the GC content with the total content
    exclude the lines containing > by applying -v ---- so |grep -v \> | 
    
    $(Evaluation of command1) / $(Evaluation of command2)
    
    ver 1. echo the GC content is $(cat paxillus.fna | grep "GC" | grep -v \> | wc) / $(cat paxillus.fna | grep -v \> | wc)
    
    echo the GC content is $(cat paxillus.fna | grep "GC" | grep -v \> | wc -c) / $(cat paxillus.fna | grep -v \> | wc -c)
    
    Could divide into variables 
    a=cat paxillus.fna | grep "GC" | grep -v \> | wc -c
    b=cat paxillus.fna | grep -v \> | wc -c)
    
    echo $((a/b))
    
    Grep only included the numebr of lines that contain GC 
    
    Try removing As and Ts from the file and save this as one version, then divide by the original
    
    ver 3
    echo the GC content is $(cat paxillus.fna | tr A -d | tr T -d | grep -v \>) / $(cat paxillus.fna | grep -v \>)
    ver 4
    echo the GC content is $(cat paxillus.fna | tr A -d | tr T -d | grep -v \> | wc -c) / $(cat paxillus.fna | grep -v \> | wc -c)
    
    
    ver 5 
    cat paxillus.fna | tr -d AT | grep -v \> | wc -c -n
    -n to avoid the bash from counting the invisible line change \ as a character
            echo the GC content is $(cat paxillus.fna | tr -d AT | grep -v \> | wc -c) / $(cat paxillus.fna | grep -v \> | wc -c)



    so in total:
        echo the GC content is $(cat paxillus.fna | tr -d AT | grep -v \> | wc -c | echo -n $paxillus) / $(cat paxillus.fna | grep -v \> | wc -c -n| echo -n $paxillus)

echo the GC content is $(cat paxillus.fna | tr -d AT | grep -v \> | wc -c | bc) / $(cat paxillus.fna | grep -v \> | wc -c | bc)



echo the GC content is $(cat paxillus.fna | tr -d AT | grep -v \> | tr -d "\n" | wc -c) / $(cat paxillus.fna | grep -v \> | tr -d "\n" | wc -c)


_Two ways to do the solution_
a) $ echo "scale=2; $(cat paxillus.fna | tr -d AT | grep -v \> | tr -d "\n" | wc -c) / $(cat paxillus.fna | grep -v \> | tr -d "\n" | wc -c) * 100" | bc
b) $ echo $(cat paxillus.fna | tr -d AT | grep -v \> | tr -d "\n" | wc -c) / $(cat paxillus.fna | grep -v \> | tr -d "\n" | wc -c) "* 100" | bc -l

a=cat paxillus.fna | tr -d AT | grep -v \> | wc -c | bc
b=cat paxillus.fna | grep -v \> | wc -c | bc

The format of the file  (only first few lines)  
>HISEQ1:132:D0T25ACXX:3:1101:1380:1974 1:N:0:TGACCA
CTTTCTCAAAGCTGTACTCGCTGGCGTCATGTTGTCCTTTGGTGGCTTGCTTGCTGTTATACTCGCTGGTGGTTCACCTAGCCTTACGGCTTCCATTCCTG
>HISEQ1:132:D0T25ACXX:3:1101:1362:1978 1:N:0:TGACCA
CCGCCCAACACCGTTCATCTGAACCAGAAATTCTGTCTTTATCCGTCTTGAGCCCTCTGATTCAGACTCGTTACGAGTGCCAGCTAGGGAATCAATTTCGT
>HISEQ1:132:D0T25ACXX:3:1101:1446:1995 1:N:0:TGACCA
GTCAAGTCCTCGGTCCTGCTCGCTTGTATGCCTTGTCATGGCATCTTCCATCCTCACGTCCACTTCTTATGATGAGAGTGCACGACTCTGCCCCGCAACTC
>HISEQ1:132:D0T25ACXX:3:1101:2212:1998 1:N:0:TGACCA
TGGAACTTGGTTTCTGTGGTTCCCGGCCTCGCTGGCAACGTCGGCACTGACTGCACGCCCATCACCGCCATCGGACTTGGCTCTGGTAGTTCCTGCACAGC
>HISEQ1:132:D0T25ACXX:3:1101:2322:1976 1:N:0:TGACCA
AAAAAAACAAGATACCAATGTCTATGGACAATTTCTCATATACGGATACAGTCCGTGCTGCCTTTGCCTCATGTTTACCATGCTTCGCCAGTTCTCCGTCC


**2.Calculate the number of times the oligo GAAGTC occurs in the file(this is more tricky than it first seems).**


echo $(cat paxillus.fna | grep -v \> | grep -o "GAAGTC" | wc -l)
when you use grep -o, it selects the desired strings (selects the lines with this string, then wc selects the number of these lines)
wc -l instead of wc -c since the -c counts individual characters but -l counts the lines of the outputs which is what you want!! Since you want to find the substrings
which you then print out and then command | wc -l counts how many times you found it


**3. Make a file with only the sequence ids. The id is the string up to the first space. Remove the>sign.** 
The ids should be output on one lineonly and be separated by spaces, like:
HISEQ1:132:D0T25ACXX:3:1101:1380:1974 HISEQ1:.....

touch paxidfile
echo $(cat paxillus.fna | sed '/^ATCG/d' paxillus.fna > paxidfile.fna) | sed '/>/d')
echo $(cat paxillus.fna | sed '/>/d' | egrep -v -e '^A^T^C^G' > paxidfile.fna)

echo $(cat paxillus.fna | grep -l ">" | tr -d "\n" | tr -d TGACCA > paxidfile.fna)

$ cat paxillus.fna | grep ">" | tr -d ">" | tr -d "\n" | tr -d 1:N:0:TGACCA > paxidfile.fna
Not right since in tr -d 1:N:0:TGACCA > paxidfile.fna   the BASH reads this the way that remove ALL characters included so all the 1s, :,, Ns etc. wont work even if you 
put tr -d "1:N:0:TGACCA" > paxidfile.fna
You need to cut the ID line into two separate parts, you can see that the ending TCAGG etc is separated by the initial part by space. Cut the line into two by cutting this
space with cut command, then select which one of these "cuts" i.e. fields you want; the first (1) or second (2):

The final solution :
$ cat paxillus.fna | grep ">" | tr -d ">" | cut -d " " -f 1 | tr -d "\n" > paxidfile.fna

 
4. Count the number of unique directories specified in your PATH variable
/home/inf-54-2020/.local/bin:/home/inf-54-2020/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin
After : sign a new directory starts off, calculate all of these directiories
local/bin:/home/inf-54-2020/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin

echo "local/bin:/home/inf-54-2020/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin" | tr : " " | wc -w


echo $(cat paxidfile.fna | sed 's/[^:]//g' | awk '{ print length }')


Quizzes



Create a file containing only the sequence ids. The id is the string up to the first whitespace.

Also, remove the > sign.

The ids should all be output on a single line, separated by spaces, like:
HISEQ1:132:D0T25ACXX:3:1101:1380:1974 HISEQ1:...

To test that you got it right, count the number of ':' characters, the number of spaces, and the number of lines, then answer with the sum of these three numbers.

echo $(cat paxidfile.fna | grep -o " " | wc -l) + $(cat paxidfile.fna | grep -o ":" | wc -l) + 1
1000000 + 6000000 + 1

